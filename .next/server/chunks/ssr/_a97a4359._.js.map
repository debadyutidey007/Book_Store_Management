{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/email.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A mock email sending service.\n *\n * In a real-world application, this service would integrate with a third-party\n * email provider like SendGrid, Resend, or AWS SES to send transactional emails.\n *\n * For this demo, it simply logs the email content to the server console to\n * simulate the action of sending an email without requiring API keys or setup.\n */\n\ntype OrderItem = {\n    id: string;\n    title: string;\n    quantity: number;\n    price: number;\n}\n\ntype OrderDetails = {\n    items: OrderItem[];\n    subtotal: number;\n    shipping: number;\n    taxes: number;\n    total: number;\n    shippingAddress: {\n      name: string;\n      address: string;\n    };\n    orderId: string;\n};\n\ntype EmailPayload = {\n    email: string;\n    orderDetails: OrderDetails;\n}\n\nfunction generateOrderConfirmationHtml(orderDetails: OrderDetails): string {\n    const itemsHtml = orderDetails.items.map(item => `\n        <tr>\n            <td>${item.title} (x${item.quantity})</td>\n            <td style=\"text-align: right;\">$${(item.price * item.quantity).toFixed(2)}</td>\n        </tr>\n    `).join('');\n\n    return `\n        <div style=\"font-family: sans-serif; max-width: 600px; margin: auto; border: 1px solid #ddd; padding: 20px;\">\n            <h1 style=\"text-align: center; color: #333;\">Thank You for Your Order!</h1>\n            <p>Your order #${orderDetails.orderId} has been confirmed.</p>\n            \n            <h2>Order Summary</h2>\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <th style=\"text-align: left; padding: 8px; border-bottom: 1px solid #ddd;\">Item</th>\n                        <th style=\"text-align: right; padding: 8px; border-bottom: 1px solid #ddd;\">Price</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${itemsHtml}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td style=\"padding: 8px; text-align: right;\">Subtotal</td>\n                        <td style=\"padding: 8px; text-align: right;\">$${orderDetails.subtotal.toFixed(2)}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding: 8px; text-align: right;\">Shipping</td>\n                        <td style=\"padding: 8px; text-align: right;\">$${orderDetails.shipping.toFixed(2)}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding: 8px; text-align: right;\">Taxes</td>\n                        <td style=\"padding: 8px; text-align: right;\">$${orderDetails.taxes.toFixed(2)}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding: 8px; text-align: right; font-weight: bold;\">Total</td>\n                        <td style=\"padding: 8px; text-align: right; font-weight: bold;\">$${orderDetails.total.toFixed(2)}</td>\n                    </tr>\n                </tfoot>\n            </table>\n            \n            <h2>Shipping To</h2>\n            <p style=\"white-space: pre-line;\">\n                ${orderDetails.shippingAddress.name}\n                ${orderDetails.shippingAddress.address.replace(/, /g, '\\n')}\n            </p>\n            \n            <p style=\"text-align: center; color: #777; margin-top: 20px;\">ShelfWise Bookstore</p>\n        </div>\n    `;\n}\n\nexport async function sendOrderConfirmationEmail({ email, orderDetails }: EmailPayload): Promise<void> {\n  // In a real app, you'd use a service like SendGrid, Resend, etc. here.\n  // For this demo, we'll just log the email to the console.\n  \n  console.log('--- SIMULATING SENDING EMAIL ---');\n  console.log('To:', email);\n  console.log('From: no-reply@shelfwise.com');\n  console.log('Subject:', `Your ShelfWise Order Confirmation #${orderDetails.orderId}`);\n  console.log('Body (HTML):');\n  // We log the raw HTML to show what would be sent.\n  console.log(generateOrderConfirmationHtml(orderDetails));\n  console.log('--- END OF SIMULATED EMAIL ---');\n  \n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n}\n"],"names":[],"mappings":";;;;;;;;AAsCA,SAAS,8BAA8B,YAA0B;IAC7D,MAAM,YAAY,aAAa,KAAK,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;;gBAEtC,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,KAAK,QAAQ,CAAC;4CACJ,EAAE,CAAC,KAAK,KAAK,GAAG,KAAK,QAAQ,EAAE,OAAO,CAAC,GAAG;;IAElF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,CAAC;;;2BAGe,EAAE,aAAa,OAAO,CAAC;;;;;;;;;;;oBAW9B,EAAE,UAAU;;;;;sEAKsC,EAAE,aAAa,QAAQ,CAAC,OAAO,CAAC,GAAG;;;;sEAInC,EAAE,aAAa,QAAQ,CAAC,OAAO,CAAC,GAAG;;;;sEAInC,EAAE,aAAa,KAAK,CAAC,OAAO,CAAC,GAAG;;;;yFAIb,EAAE,aAAa,KAAK,CAAC,OAAO,CAAC,GAAG;;;;;;;gBAOzG,EAAE,aAAa,eAAe,CAAC,IAAI,CAAC;gBACpC,EAAE,aAAa,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,MAAM;;;;;IAKxE,CAAC;AACL;AAEO,eAAe,2BAA2B,EAAE,KAAK,EAAE,YAAY,EAAgB;IACpF,uEAAuE;IACvE,0DAA0D;IAE1D,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,OAAO;IACnB,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,YAAY,CAAC,mCAAmC,EAAE,aAAa,OAAO,EAAE;IACpF,QAAQ,GAAG,CAAC;IACZ,kDAAkD;IAClD,QAAQ,GAAG,CAAC,8BAA8B;IAC1C,QAAQ,GAAG,CAAC;IAEZ,yBAAyB;IACzB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;AACnD;;;IAfsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/checkout/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendOrderConfirmationEmail as '40589759d729c06efcd97dfc68c6fd02a51cfc7783'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/checkout/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/checkout/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/checkout/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/checkout/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/checkout/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/checkout/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}